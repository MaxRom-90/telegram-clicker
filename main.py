import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram import Router


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = "7758985947:AAH7BVZHtLzlgbPB9Fk-vuVIl-1Mo78EC_w"  # –í–∞—à —Ç–æ–∫–µ–Ω 2
WEB_APP_URL = "https://maxrom-90.github.io/telegram-clicker/game.html"  # –í–∞—à Web App
SCORES_FILE = "scores.json"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –†–∞–±–æ—Ç–∞ —Å JSON ---
def load_scores():
    if os.path.exists(SCORES_FILE):
        try:
            with open(SCORES_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ scores.json: {e}")
            return {}
    return {}

def save_scores(scores):
    try:
        with open(SCORES_FILE, "w", encoding="utf-8") as file:
            json.dump(scores, file, indent=4, ensure_ascii=False)
        print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ scores.json:", scores)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è scores.json: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=WEB_APP_URL))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!",
        reply_markup=keyboard
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App ---
@dp.message()
async def handle_web_app_data(message: types.Message):
    if message.web_app_data:
        try:
            print("\n--- –ü–æ–ª—É—á–µ–Ω—ã RAW –¥–∞–Ω–Ω—ã–µ ---")
            print("–í–µ–±-–¥–∞–Ω–Ω—ã–µ:", message.web_app_data)
            print("–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:", message.web_app_data.data)
            
            user_id = message.from_user.id
            data = json.loads(message.web_app_data.data)
            clicks = data["clicks"]
            print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {clicks} –∫–ª–∏–∫–æ–≤.")
            
            scores = load_scores()
            print("–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ scores.json:", scores)
            
            scores[str(user_id)] = max(clicks, scores.get(str(user_id), 0))
            save_scores(scores)
            
            await message.answer(
                f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: *{clicks}* –∫–ª–∏–∫–æ–≤\n"
                f"üèÖ –†–µ–∫–æ—Ä–¥: *{scores[str(user_id)]}* –∫–ª–∏–∫–æ–≤\n"
                "–ï—â–µ —Ä–∞–∑–æ–∫? /start",
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())